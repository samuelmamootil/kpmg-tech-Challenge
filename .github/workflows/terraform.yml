name: "Terraform action"

on:
  workflow_call:
    inputs:
      env_name:
        type: string
        required: true
      env_path:
        type: string
        required: true
      terraform_version:
        required: false
        type: string
        default: "1.2.5"
      terraform_fmt_args:
        required: false
        type: string
        default: -check -diff -recursive
      terraform_plan_args:
        required: false
        type: string
        default: -var-file=variables.tfvars -detailed-exitcode -no-color
      terraform_apply_args:
        required: false
        type: string
        default: -var-file=variables.tfvars -auto-approve
                
        
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE: ${{secrets.AWS_ROLE}}
jobs:
  terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env_name }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.ref_name || github.ref_name }}

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform fmt
        id: fmt
        run:  terraform -chdir="${{ inputs.env_path }}" fmt ${{ inputs.terraform_fmt_args }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform -chdir="${{ inputs.env_path }}" init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${AWS_DYNAMO_DB_TABLE}"

      - name: Terraform Validate
        id: validate
        run: terraform -chdir="${{ inputs.env_path }}" validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir="${{ inputs.env_path }}" plan ${{ inputs.terraform_plan_args }} -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true
         # 0 = Succeeded with empty diff (no changes)
         # 1 = Error
         # 2 = Succeeded with non-empty diff (changes present)


      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })            

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' #&& github.event_name == 'push'
        run: terraform apply -auto-approve ${{ inputs.terraform_apply_args}}
